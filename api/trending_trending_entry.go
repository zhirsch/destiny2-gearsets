/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

package api

import (
	"time"
)



// The list entry view for trending items. Returns just enough to show the item on the trending page.
type TrendingTrendingEntry struct {
	// The weighted score of this trending item.
	Weight float64 `json:"weight,omitempty"`
	
	IsFeatured bool `json:"isFeatured,omitempty"`
	// We don't know whether the identifier will be a string, a uint, or a long... so we're going to cast it all to a string. But either way, we need any trending item created to have a single unique identifier for its type.
	Identifier string `json:"identifier,omitempty"`
	// An enum - unfortunately - dictating all of the possible kinds of trending items that you might get in your result set, in case you want to do custom rendering or call to get the details of the item.
	EntityType *interface{} `json:"entityType,omitempty"`
	// The localized \"display name/article title/'primary localized identifier'\" of the entity.
	DisplayName string `json:"displayName,omitempty"`
	// If the entity has a localized tagline/subtitle/motto/whatever, that is found here.
	Tagline string `json:"tagline,omitempty"`
	
	Image string `json:"image,omitempty"`
	
	StartDate time.Time `json:"startDate,omitempty"`
	
	EndDate time.Time `json:"endDate,omitempty"`
	
	Link string `json:"link,omitempty"`
	// If this is populated, the entry has a related WebM video to show. I am 100% certain I am going to regret putting this directly on TrendingEntry, but it will work so yolo
	WebmVideo string `json:"webmVideo,omitempty"`
	// If this is populated, the entry has a related MP4 video to show. I am 100% certain I am going to regret putting this directly on TrendingEntry, but it will work so yolo
	Mp4Video string `json:"mp4Video,omitempty"`
	// If isFeatured, this image will be populated with whatever the featured image is. Note that this will likely be a very large image, so don't use it all the time.
	FeatureImage string `json:"featureImage,omitempty"`
}

