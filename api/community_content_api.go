/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

package api

import (
	"net/url"
	"net/http"
	"strings"
	"golang.org/x/net/context"
	"encoding/json"
	"fmt"
)

// Linger please
var (
	_ context.Context
)

type CommunityContentApiService service


/* CommunityContentApiService 
 Returns community content.

 @param mediaFilter The type of media to get
 @param page Zero based page
 @param sort The sort mode.
 @return InlineResponse2006*/
func (a *CommunityContentApiService) CommunityContentGetCommunityContent(mediaFilter int32, page int32, sort int32) (InlineResponse2006,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  InlineResponse2006
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/CommunityContent/Get/{sort}/{mediaFilter}/{page}/"
	localVarPath = strings.Replace(localVarPath, "{"+"mediaFilter"+"}", fmt.Sprintf("%v", mediaFilter), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"page"+"}", fmt.Sprintf("%v", page), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sort"+"}", fmt.Sprintf("%v", sort), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(nil, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	 localVarHttpResponse, err := a.client.callAPI(r)
	 if err != nil || localVarHttpResponse == nil {
		  return successPayload, localVarHttpResponse, err
	 }
	 defer localVarHttpResponse.Body.Close()
	 if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	 }
	
	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
	 	return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* CommunityContentApiService 
 Returns info about community members who are live streaming.

 @param page Zero based page.
 @param partnershipType The type of partnership for which the status should be returned.
 @param sort The sort mode.
 @param optional (nil or map[string]interface{}) with one or more of:
     @param "modeHash" (int32) The hash of the Activity Mode for which streams should be retrieved. Don&#39;t pass it in or pass 0 to not filter by mode.
     @param "streamLocale" (string) The locale for streams you&#39;d like to see. Don&#39;t pass this to fall back on your BNet locale. Pass &#39;ALL&#39; to not filter by locale.
 @return InlineResponse20050*/
func (a *CommunityContentApiService) CommunityContentGetCommunityLiveStatuses(page int32, partnershipType int32, sort int32, localVarOptionals map[string]interface{}) (InlineResponse20050,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  InlineResponse20050
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/CommunityContent/Live/All/{partnershipType}/{sort}/{page}/"
	localVarPath = strings.Replace(localVarPath, "{"+"page"+"}", fmt.Sprintf("%v", page), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"partnershipType"+"}", fmt.Sprintf("%v", partnershipType), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sort"+"}", fmt.Sprintf("%v", sort), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if err := typeCheckParameter(localVarOptionals["modeHash"], "int32", "modeHash"); err != nil {
		return successPayload, nil, err
	}
	if err := typeCheckParameter(localVarOptionals["streamLocale"], "string", "streamLocale"); err != nil {
		return successPayload, nil, err
	}

	if localVarTempParam, localVarOk := localVarOptionals["modeHash"].(int32); localVarOk {
		localVarQueryParams.Add("modeHash", parameterToString(localVarTempParam, ""))
	}
	if localVarTempParam, localVarOk := localVarOptionals["streamLocale"].(string); localVarOk {
		localVarQueryParams.Add("streamLocale", parameterToString(localVarTempParam, ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(nil, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	 localVarHttpResponse, err := a.client.callAPI(r)
	 if err != nil || localVarHttpResponse == nil {
		  return successPayload, localVarHttpResponse, err
	 }
	 defer localVarHttpResponse.Body.Close()
	 if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	 }
	
	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
	 	return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* CommunityContentApiService 
 Returns info about community members who are live streaming in your clans.

 @param page Zero based page.
 @param partnershipType The type of partnership for which the status should be returned.
 @param sort The sort mode.
 @return InlineResponse20050*/
func (a *CommunityContentApiService) CommunityContentGetCommunityLiveStatusesForClanmates(page int32, partnershipType int32, sort int32) (InlineResponse20050,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  InlineResponse20050
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/CommunityContent/Live/Clan/{partnershipType}/{sort}/{page}/"
	localVarPath = strings.Replace(localVarPath, "{"+"page"+"}", fmt.Sprintf("%v", page), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"partnershipType"+"}", fmt.Sprintf("%v", partnershipType), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sort"+"}", fmt.Sprintf("%v", sort), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(nil, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	 localVarHttpResponse, err := a.client.callAPI(r)
	 if err != nil || localVarHttpResponse == nil {
		  return successPayload, localVarHttpResponse, err
	 }
	 defer localVarHttpResponse.Body.Close()
	 if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	 }
	
	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
	 	return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* CommunityContentApiService 
 Returns info about community members who are live streaming among your friends.

 @param page Zero based page.
 @param partnershipType The type of partnership for which the status should be returned.
 @param sort The sort mode.
 @return InlineResponse20050*/
func (a *CommunityContentApiService) CommunityContentGetCommunityLiveStatusesForFriends(page int32, partnershipType int32, sort int32) (InlineResponse20050,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  InlineResponse20050
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/CommunityContent/Live/Friends/{partnershipType}/{sort}/{page}/"
	localVarPath = strings.Replace(localVarPath, "{"+"page"+"}", fmt.Sprintf("%v", page), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"partnershipType"+"}", fmt.Sprintf("%v", partnershipType), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sort"+"}", fmt.Sprintf("%v", sort), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(nil, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	 localVarHttpResponse, err := a.client.callAPI(r)
	 if err != nil || localVarHttpResponse == nil {
		  return successPayload, localVarHttpResponse, err
	 }
	 defer localVarHttpResponse.Body.Close()
	 if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	 }
	
	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
	 	return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* CommunityContentApiService 
 Returns info about Featured live streams.

 @param page Zero based page.
 @param partnershipType The type of partnership for which the status should be returned.
 @param sort The sort mode.
 @param optional (nil or map[string]interface{}) with one or more of:
     @param "streamLocale" (string) The locale for streams you&#39;d like to see. Don&#39;t pass this to fall back on your BNet locale. Pass &#39;ALL&#39; to not filter by locale.
 @return InlineResponse20050*/
func (a *CommunityContentApiService) CommunityContentGetFeaturedCommunityLiveStatuses(page int32, partnershipType int32, sort int32, localVarOptionals map[string]interface{}) (InlineResponse20050,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  InlineResponse20050
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/CommunityContent/Live/Featured/{partnershipType}/{sort}/{page}/"
	localVarPath = strings.Replace(localVarPath, "{"+"page"+"}", fmt.Sprintf("%v", page), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"partnershipType"+"}", fmt.Sprintf("%v", partnershipType), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sort"+"}", fmt.Sprintf("%v", sort), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if err := typeCheckParameter(localVarOptionals["streamLocale"], "string", "streamLocale"); err != nil {
		return successPayload, nil, err
	}

	if localVarTempParam, localVarOk := localVarOptionals["streamLocale"].(string); localVarOk {
		localVarQueryParams.Add("streamLocale", parameterToString(localVarTempParam, ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(nil, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	 localVarHttpResponse, err := a.client.callAPI(r)
	 if err != nil || localVarHttpResponse == nil {
		  return successPayload, localVarHttpResponse, err
	 }
	 defer localVarHttpResponse.Body.Close()
	 if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	 }
	
	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
	 	return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

/* CommunityContentApiService 
 Gets the Live Streaming status of a particular Account and Membership Type.

 @param membershipId The membershipId related to that type.
 @param membershipType The type of account for which info will be extracted.
 @param partnershipType The type of partnership for which info will be extracted.
 @return InlineResponse20051*/
func (a *CommunityContentApiService) CommunityContentGetStreamingStatusForMember(membershipId int64, membershipType int32, partnershipType int32) (InlineResponse20051,  *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
	 	successPayload  InlineResponse20051
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/CommunityContent/Live/Users/{partnershipType}/{membershipType}/{membershipId}/"
	localVarPath = strings.Replace(localVarPath, "{"+"membershipId"+"}", fmt.Sprintf("%v", membershipId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"membershipType"+"}", fmt.Sprintf("%v", membershipType), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"partnershipType"+"}", fmt.Sprintf("%v", partnershipType), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(nil, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return successPayload, nil, err
	}

	 localVarHttpResponse, err := a.client.callAPI(r)
	 if err != nil || localVarHttpResponse == nil {
		  return successPayload, localVarHttpResponse, err
	 }
	 defer localVarHttpResponse.Body.Close()
	 if localVarHttpResponse.StatusCode >= 300 {
		return successPayload, localVarHttpResponse, reportError(localVarHttpResponse.Status)
	 }
	
	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
	 	return successPayload, localVarHttpResponse, err
	}


	return successPayload, localVarHttpResponse, err
}

